[tox]
min_version = 4.16.0
env_list =
    lint
    docs
    notebooks
    doctests
    py39
    py310-extras-numpy
    py311-extras-sbck
    py312-extras-lmoments
labels =
    static = lint
    test = py39, py310-extras-numpy, py311-extras-sbck, py312-extras-lmoments
    special = docs, notebooks, doctests
requires =
    pip >= 24.0
    flit >=3.9
opts = -vv

[gh]
python =
    3.9 = py39-coverage
    3.10 = py310-coverage-extras-numpy
    3.11 = py311-coverage-extras-sbck
    3.12 = py312-coverage-extras-lmoments

[testenv:lint]
description = Run code quality compliance tests under {basepython}
skip_install = True
extras =
deps =
    codespell ==2.3.0
    deptry==0.16.1
    flake8 >=7.0.0
    flake8-rst-docstrings
    black[jupyter]==24.4.2
    blackdoc==0.3.9
    isort==5.13.2
    nbqa
    ruff==0.4.10
    vulture==2.11
    yamllint==1.35.1
commands_pre =
commands =
    black --check xclim tests
    isort --check xclim tests
    ruff check xclim tests
    flake8 --config=.flake8 xclim tests
    vulture xclim tests
    nbqa black --check docs
    blackdoc --check --exclude=xclim/indices/__init__.py xclim
    blackdoc --check docs
    codespell xclim tests docs
    deptry .
    yamllint --config-file=.yamllint.yaml xclim
commands_post =

[testenv:docs]
description = Build the documentation with makefile under {basepython}
setenv =
    PYTHONPATH = {toxinidir}
    READTHEDOCS = 1
deps =
    docs
commands_pre =
commands =
    make docs
commands_post =
allowlist_externals =
    env
    make

# Requires tox-conda compatible with tox@v4.0
;[testenv:conda]
;description = Run tests with pytest under {basepython} (Anaconda distribution)
;commands_pre =
;conda_channels = conda-forge
;conda_env = environment-dev.yml
;deps =
;extras =

[testenv:notebooks{-prefetch,}]
description = Run notebooks with pytest under {basepython}
extras =
    all
deps =
    lmoments3
commands =
    pytest --no-cov --nbval --dist=loadscope --rootdir=tests/ --ignore=docs/notebooks/example.ipynb docs/notebooks
commands_post =

[testenv:doctests{-prefetch,}]
description = Run doctests with pytest under {basepython}
commands =
    python -c 'from xclim.testing.utils import run_doctests; run_doctests()'
commands_post =

[testenv]
description = Run tests with pytest under {basepython}
setenv =
    COV_CORE_SOURCE =
    PYTEST_ADDOPTS = --numprocesses=logical --durations=10
    coverage: PYTEST_ADDOPTS = --numprocesses=logical --durations=10 --cov=xclim --cov-report=term-missing
    PYTHONPATH = {toxinidir}
    Xfrozen_modules = off
passenv =
    CI
    CONDA_EXE
    COVERALLS_*
    GITHUB_*
    LD_LIBRARY_PATH
    SKIP_NOTEBOOKS
    XCLIM_*
extras =
    dev
    extras: extras
deps =
    lmoments: lmoments3
    numpy: numpy>=1.20,<2.0
    numpy: pint>=0.18,<0.24.0
    sbck: pybind11
    upstream: -r CI/requirements_upstream.txt
install_command = python -m pip install --no-user {opts} {packages}
download = True
commands_pre =
    sbck: python -c 'print("The sbck dependency requires the \"libeigen3-dev\" package to be installed on the system.")'
    sbck: python -m pip install sbck
    python -m pip list
    xclim show_version_info
    python -m pip check
    xclim --help
    prefetch: xclim prefetch_testing_data
commands =
    !offline: pytest {posargs}
    ; Prevent socket connections (except for unix sockets for async support)
    offline: python -c 'print("Running offline tests with positional arguments: --disable-socket --allow-unix-socket --m \"not requires_internet\"")'
    offline: python -c 'print("These can be overwritten with: tox -e offline -- -m \"some other marker statement\"")'
    offline: pytest --disable-socket --allow-unix-socket {posargs:-m 'not requires_internet'}
commands_post =
    coverage: - coveralls
allowlist_externals =
    git
    xclim
